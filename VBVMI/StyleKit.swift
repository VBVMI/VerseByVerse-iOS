//
//  StyleKit.swift
//  VBVMI
//
//  Created by Thomas Carey on 29/11/16.
//  Copyright Â© 2016 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let hideGradientColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)
        static let lightGrey: UIColor = UIColor(red: 0.813, green: 0.813, blue: 0.813, alpha: 1.000)
        static let darkGrey: UIColor = UIColor(red: 0.285, green: 0.285, blue: 0.285, alpha: 1.000)
        static let black: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let midGrey: UIColor = UIColor(red: 0.501, green: 0.501, blue: 0.501, alpha: 1.000)
        static let orange: UIColor = UIColor(red: 1.000, green: 0.615, blue: 0.000, alpha: 1.000)
        static let darkOrange: UIColor = StyleKit.orange.shadow(withLevel: 0.3)
        static let orangeFaint: UIColor = StyleKit.orange.withAlpha(0.2)
        static let hideGradient: CGGradient = CGGradient(colorsSpace: nil, colors: [UIColor.white.cgColor, StyleKit.hideGradientColor.cgColor] as CFArray, locations: [0.25, 1])!
        static var imageOfTopicLabelBackground: UIImage?
        static var topicLabelBackgroundTargets: [AnyObject]?
        static var imageOfAirPlayCanvas: UIImage?
        static var airPlayCanvasTargets: [AnyObject]?
        static var imageOfForward: UIImage?
        static var forwardTargets: [AnyObject]?
        static var imageOfRollback: UIImage?
        static var rollbackTargets: [AnyObject]?
        static var imageOfBlankBackgroundImage: UIImage?
        static var blankBackgroundImageTargets: [AnyObject]?
    }

    //// Colors

    @objc public dynamic class var hideGradientColor: UIColor { return Cache.hideGradientColor }
    @objc public dynamic class var lightGrey: UIColor { return Cache.lightGrey }
    @objc public dynamic class var darkGrey: UIColor { return Cache.darkGrey }
    @objc public dynamic class var black: UIColor { return Cache.black }
    @objc public dynamic class var white: UIColor { return Cache.white }
    @objc public dynamic class var midGrey: UIColor { return Cache.midGrey }
    @objc public dynamic class var orange: UIColor { return Cache.orange }
    @objc public dynamic class var darkOrange: UIColor { return Cache.darkOrange }
    @objc public dynamic class var orangeFaint: UIColor { return Cache.orangeFaint }

    //// Gradients

    @objc public dynamic class var hideGradient: CGGradient { return Cache.hideGradient }

    //// Drawing Methods

    @objc public dynamic class func drawHideBackground(frame: CGRect = CGRect(x: 0, y: 0, width: 196, height: 58)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Rectangle Drawing
        let rectangleRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(StyleKit.hideGradient,
            start: CGPoint(x: rectangleRect.midX, y: rectangleRect.maxY),
            end: CGPoint(x: rectangleRect.midX, y: rectangleRect.minY),
            options: [])
        context.restoreGState()
    }

    @objc public dynamic class func drawTopicLabelBackground() {

        //// Variable Declarations
        let color = StyleKit.white

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 5, height: 5), cornerRadius: 2)
        color.setFill()
        rectanglePath.fill()
    }

    @objc public dynamic class func drawCanvas1() {
    }

    @objc public dynamic class func drawAirPlayCanvas() {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.5, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 18, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3, y: 17))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 9.5))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 1, y: 11))
        bezier3Path.addLine(to: CGPoint(x: 1, y: 1))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 1))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 11))
        bezier3Path.addLine(to: CGPoint(x: 15, y: 11))
        bezier3Path.addLine(to: CGPoint(x: 16, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 21, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 21, y: -0))
        bezier3Path.addLine(to: CGPoint(x: 0, y: -0))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 5, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 6, y: 11))
        bezier3Path.addLine(to: CGPoint(x: 1, y: 11))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
    }

    @objc public dynamic class func drawPieProgress(frame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 10), progressColor: UIColor = UIColor(red: 1.000, green: 0.615, blue: 0.000, alpha: 1.000), progress: CGFloat = 0) {

        //// Variable Declarations
        let angle: CGFloat = -(progress * 360) + 90

        //// Oval Drawing
        let ovalRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -angle * CGFloat.pi/180, clockwise: true)
        ovalPath.addLine(to: CGPoint(x: ovalRect.midX, y: ovalRect.midY))
        ovalPath.close()

        progressColor.setFill()
        ovalPath.fill()
    }

    @objc public dynamic class func drawForward() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 12, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 2.52))
        bezier2Path.addLine(to: CGPoint(x: 12, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 5))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 16, y: 5))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 2.52))
        bezier3Path.addLine(to: CGPoint(x: 16, y: -0))
        bezier3Path.addLine(to: CGPoint(x: 16, y: 5))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 20.5, y: 14))
        ovalPath.addLine(to: CGPoint(x: 23.5, y: 14))
        ovalPath.addCurve(to: CGPoint(x: 12, y: 25.5), controlPoint1: CGPoint(x: 23.5, y: 20.35), controlPoint2: CGPoint(x: 18.35, y: 25.5))
        ovalPath.addCurve(to: CGPoint(x: 0.5, y: 14), controlPoint1: CGPoint(x: 5.65, y: 25.5), controlPoint2: CGPoint(x: 0.5, y: 20.35))
        ovalPath.addCurve(to: CGPoint(x: 12, y: 2.5), controlPoint1: CGPoint(x: 0.5, y: 7.65), controlPoint2: CGPoint(x: 5.65, y: 2.5))
        UIColor.white.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 0.5, y: 14))
        UIColor.white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 12, y: 22.5))
        bezier4Path.addLine(to: CGPoint(x: 12, y: 25.5))
        UIColor.white.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 3.5, y: 8, width: 17, height: 12)
        let textTextContent = "30"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes: [NSAttributedStringKey: Any] = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 10), NSAttributedStringKey.foregroundColor: UIColor.white, NSAttributedStringKey.paragraphStyle: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
    }

    @objc public dynamic class func drawRollback() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 12, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 2.52))
        bezier2Path.addLine(to: CGPoint(x: 12, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 5))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8, y: 5))
        bezier3Path.addLine(to: CGPoint(x: 4, y: 2.52))
        bezier3Path.addLine(to: CGPoint(x: 8, y: -0))
        bezier3Path.addLine(to: CGPoint(x: 8, y: 5))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 3.5, y: 14))
        ovalPath.addLine(to: CGPoint(x: 0.5, y: 14))
        ovalPath.addCurve(to: CGPoint(x: 12, y: 25.5), controlPoint1: CGPoint(x: 0.5, y: 20.35), controlPoint2: CGPoint(x: 5.65, y: 25.5))
        ovalPath.addCurve(to: CGPoint(x: 23.5, y: 14), controlPoint1: CGPoint(x: 18.35, y: 25.5), controlPoint2: CGPoint(x: 23.5, y: 20.35))
        ovalPath.addCurve(to: CGPoint(x: 12, y: 2.5), controlPoint1: CGPoint(x: 23.5, y: 7.65), controlPoint2: CGPoint(x: 18.35, y: 2.5))
        UIColor.white.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()




        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 20.5, y: 14))
        UIColor.white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 12, y: 22.5))
        bezier4Path.addLine(to: CGPoint(x: 12, y: 25.5))
        UIColor.white.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 3.5, y: 8, width: 17, height: 12)
        let textTextContent = "30"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 10), NSAttributedStringKey.foregroundColor: UIColor.white, NSAttributedStringKey.paragraphStyle: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
    }

    @objc public dynamic class func drawPieProgressDeplete(frame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), progress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [StyleKit.orange.cgColor, StyleKit.orangeFaint.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let depletionAngle: CGFloat = progress * 360 + 90

        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 24, y: frame.minY)
        context.scaleBy(x: -1, y: 1)

        let ovalRect = CGRect(x: 0, y: 0, width: 24, height: 24)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -(depletionAngle - 360) * CGFloat.pi/180, clockwise: true)
        ovalPath.addLine(to: CGPoint(x: ovalRect.midX, y: ovalRect.midY))
        ovalPath.close()

        context.saveGState()
        ovalPath.addClip()
        let ovalResizeRatio: CGFloat = min(ovalRect.width / 24, ovalRect.height / 24)
        context.drawRadialGradient(gradient,
            startCenter: CGPoint(x: ovalRect.midX + -1.64 * ovalResizeRatio, y: ovalRect.midY + 1.95 * ovalResizeRatio), startRadius: 14.96 * ovalResizeRatio,
            endCenter: CGPoint(x: ovalRect.midX + 0 * ovalResizeRatio, y: ovalRect.midY + 0 * ovalResizeRatio), endRadius: 3.73 * ovalResizeRatio,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()
    }

    @objc public dynamic class func drawDotView(frame: CGRect = CGRect(x: 0, y: 0, width: 3, height: 3)) {

        //// Variable Declarations
        let dotColor = StyleKit.darkGrey

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height))
        dotColor.setFill()
        ovalPath.fill()
    }

    @objc public dynamic class func drawCenteredProgress(progress: CGFloat = 0, progressFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 4)) {

        //// Variable Declarations
        let progressWidth: CGFloat = (1 - progress) * (progressFrame.width - progressFrame.height) + progressFrame.height
        let progressOffset: CGFloat = (progressFrame.width - progressWidth) / 2.0

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: progressOffset, y: 0, width: progressWidth, height: 4), cornerRadius: 2)
        StyleKit.orange.setFill()
        rectanglePath.fill()
    }

    @objc public dynamic class func drawBlankBackgroundImage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 3, height: 3), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 3, height: 3), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 3, y: resizedFrame.height / 3)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 3))
        StyleKit.lightGrey.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc public dynamic class var imageOfTopicLabelBackground: UIImage {
        if Cache.imageOfTopicLabelBackground != nil {
            return Cache.imageOfTopicLabelBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 5, height: 5), false, 0)
            StyleKit.drawTopicLabelBackground()

        Cache.imageOfTopicLabelBackground = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 2, left: 2, bottom: 2, right: 2), resizingMode: .tile).withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTopicLabelBackground!
    }

    @objc public dynamic class var imageOfAirPlayCanvas: UIImage {
        if Cache.imageOfAirPlayCanvas != nil {
            return Cache.imageOfAirPlayCanvas!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 17), false, 0)
            StyleKit.drawAirPlayCanvas()

        Cache.imageOfAirPlayCanvas = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile).withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfAirPlayCanvas!
    }

    @objc public dynamic class var imageOfForward: UIImage {
        if Cache.imageOfForward != nil {
            return Cache.imageOfForward!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 26), false, 0)
            StyleKit.drawForward()

        Cache.imageOfForward = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile).withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfForward!
    }

    @objc public dynamic class var imageOfRollback: UIImage {
        if Cache.imageOfRollback != nil {
            return Cache.imageOfRollback!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 26), false, 0)
            StyleKit.drawRollback()

        Cache.imageOfRollback = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile).withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfRollback!
    }

    @objc public dynamic class var imageOfBlankBackgroundImage: UIImage {
        if Cache.imageOfBlankBackgroundImage != nil {
            return Cache.imageOfBlankBackgroundImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 3, height: 3), false, 0)
            StyleKit.drawBlankBackgroundImage()

        Cache.imageOfBlankBackgroundImage = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 1, left: 1, bottom: 1, right: 1), resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfBlankBackgroundImage!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var topicLabelBackgroundTargets: [AnyObject]! {
        get { return Cache.topicLabelBackgroundTargets }
        set {
            Cache.topicLabelBackgroundTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setSelectedImage:"), with: StyleKit.imageOfTopicLabelBackground)
            }
        }
    }

    @IBOutlet dynamic var airPlayCanvasTargets: [AnyObject]! {
        get { return Cache.airPlayCanvasTargets }
        set {
            Cache.airPlayCanvasTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfAirPlayCanvas)
            }
        }
    }

    @IBOutlet dynamic var forwardTargets: [AnyObject]! {
        get { return Cache.forwardTargets }
        set {
            Cache.forwardTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfForward)
            }
        }
    }

    @IBOutlet dynamic var rollbackTargets: [AnyObject]! {
        get { return Cache.rollbackTargets }
        set {
            Cache.rollbackTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfRollback)
            }
        }
    }

    @IBOutlet dynamic var blankBackgroundImageTargets: [AnyObject]! {
        get { return Cache.blankBackgroundImageTargets }
        set {
            Cache.blankBackgroundImageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfBlankBackgroundImage)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
